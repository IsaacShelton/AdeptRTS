
import 'main.adept'

struct TurnQueue (turns 3 Turn, is_server bool) {
    func create {
        repeat 3, this.turns[idx].zero()
        repeat 3 {
            this.turns[idx].hasServer = true
            this.turns[idx].hasClient = true
        }
        this.is_server = false
    }
    
    func destroy {
        repeat 3, this.turns[idx].destroy()
    }
    
    func shift {
        unless this.canShift(), return
        this.turns[0].destroy()
        this.turns[0] = this.turns[1]
        this.turns[1] = this.turns[2]
        this.turns[2].zero()
    }
    
    func performAndShift {
        unless this.canShift(), printf('INTERNAL ERROR: Can\'t Turn.performAndShift()\n'); return
        this.turns[0].perform()
        this.shift()
    }
    
    func feedInternal(actions Actions, checksum ubyte) {
        this.turns[2].feedInternal(this.is_server, actions, checksum)
    }
    
    func feedExternal(data *ubyte, length usize) {
        this.turns[1].feedExternal(this.is_server, data, length)
    }
    
    func feedBlankExternal {
        this.turns[1].feedBlankExternal(this.is_server)
    }
    
    func printSummary {
        printf('is_server = %d\n', this.is_server as int)
        repeat 3, this.turns[idx].print()
        printf('\n')
    }
    
    func countQueuedUnits(team int, kind UnitKind) usize {
        queued usize = 0
        repeat 3, queued += this.turns[idx].countQueuedUnits(team, kind)
        return queued
    }
    
    func canShift bool = this.turns[1].hasServer && this.turns[1].hasClient && (this.is_server ? this.turns[2].hasServer : this.turns[2].hasClient)
    func waitingOnNetwork bool = this.is_server ? !this.turns[1].hasClient : !this.turns[1].hasServer
}

struct Turn (server, client Actions, hasServer, hasClient bool, checksum ubyte) {
    func zero {
        this.server.zero()
        this.client.zero()
        this.hasServer = false
        this.hasClient = false
        this.checksum = 0
    }
    
    func destroy {
        this.server.destroy()
        this.client.destroy()
    }
    
    func perform {
        debug('Executing Server Commands:\n')
        this.server.execute()
        debug('Executing Client Commands:\n')
        this.client.execute()
        debug('Done Executing\n')
    }
    
    func feedInternal(we_are_server bool, actions Actions, checksum ubyte) {
        if we_are_server ? this.hasServer : this.hasClient,
            printf('INTERNAL ERROR: Turn.feedInternal() called when actions already present for \'%s\'\n', we_are_server ? 'server' : 'client'); return
        
        if we_are_server {
            this.server = actions
            this.hasServer = true
        } else {
            this.client = actions
            this.hasClient = true
        }
        
        this.checksum = checksum
    }
    
    func feedExternal(we_are_server bool, data *ubyte, length usize) {
        if we_are_server ? this.hasClient : this.hasServer,
            printf('INTERNAL ERROR: Turn.feedExternal() called when actions already present for partner \'%s\'\n', we_are_server ? 'client' : 'server'); return
        
        if length == 0 {
            printf('INTERNAL ERROR: Turn.feedExternal() received zero length message\n')
            return
        }
        
        if this.checksum != data[0] {
            gamedata.text.destroy()
            gamedata.text = text("Out of Sync", 14.0f);
            gamedata.text_timer = 60
            
            printf('INTERNAL ERROR: feedExternal() checksum mismatch 0x%02X 0x%02X\n', this.checksum as int, data[0] as int)
            
            #if debug_checksum
            each String in gamedata.hash_info_list {
                print(it)
            }
            exit(1)
            #end
        }
        
        if we_are_server {
            this.client.transferFromNetworkBuffer(data at 1, length - 1)
            this.hasClient = true
        } else {
            this.server.transferFromNetworkBuffer(data at 1, length - 1)
            this.hasServer = true
        }
    }
    
    func feedBlankExternal(we_are_server bool) {
        if we_are_server ? this.hasClient : this.hasServer,
            printf('INTERNAL ERROR: Turn.feedExternal() called when actions already present for partner \'%s\'\n', we_are_server ? 'client' : 'server'); return
        
        if we_are_server {
            this.client.transferFromNetworkBuffer(null, 0)
            this.hasClient = true
        } else {
            this.server.transferFromNetworkBuffer(null, 0)
            this.hasServer = true
        }
    }
    
    func countQueuedUnits(team int, kind UnitKind) usize {
        return (this.hasServer ? this.server.countQueuedUnits(team, kind) : 0uz) + (this.hasClient ? this.client.countQueuedUnits(team, kind) : 0uz)
    }
    
    func print {
        printf('hasServer = %d, hasClient = %d\n', this.hasServer as int, this.hasClient as int)
    }
}


import 'main.adept'
import 'Socket.adept'
import 'NetworkStream.adept'

import '2.2/String.adept'
import '2.2/terminal.adept'
import 'sys/cerrno.adept'
import 'posix/pthread.adept'

PORT == 5678

func startServer {
    gamedata.creating_game = false
    gamedata.team = 1
    gamedata.cameraX = gamedata.minX
    pthread_create(&gamedata.networking_thread, null, func &server, null)
}

func startClient(address String) {
    gamedata.creating_game = false
    gamedata.team = 2
    gamedata.cameraX = gamedata.maxX - captViewWidth()
    pthread_create(&gamedata.networking_thread, null, func &client, address.cstr())
}

func server(data ptr) ptr {
    startupNetworking()
    defer cleanupNetworking()
    
    server_fd Socket = socket(AF_INET, SOCK_STREAM, 0)
    unless validSocket(server_fd),
        printf('socket() failed\n'); return null
    
    defer closeSocket(server_fd)
    
    server sockaddr_in
    server.sin_family = AF_INET
    server.sin_port = htons(PORT)
    server.sin_addr.s_addr = htonl(INADDR_ANY)
    
    flags int = 1
    if setsockopt(server_fd, SOL_SOCKET, SO_REUSEADDR, &flags, sizeof int) < 0,
        printf('setsockopt(SO_REUSEADDR) failed\n'); return null
    
    if bind(server_fd, &server as *sockaddr, sizeof sockaddr_in) < 0 {
        printf('bind() failed\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to bind port"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    printf('Listening...\n')
    
    if listen(server_fd, 16) < 0,
        printf('listen() failed\n'); return null
    
    client_fd Socket = undef
    
    ioctlopt IOCtlOpt = 1
    ioctlSocket(server_fd, FIONBIO, &ioctlopt)
    
    while continue {
        if networkingThreadShouldClose(), return null
        
        client_length socklen_t = sizeof sockaddr_in
        client_fd = accept(server_fd, undef client sockaddr_in as *sockaddr, &client_length)
        unless validSocket(client_fd), continue
    }
    
    defer printf('Terminating...\n')
    defer closeSocket(client_fd)
    
    printf('Connected\n')
    pthread_mutex_lock(&gamedata.networking_mutex)
    gamedata.waiting_for_connection = false
    pthread_mutex_unlock(&gamedata.networking_mutex)
    
    transmission(client_fd, true)
    return null
}

func client(strong_host_address ptr) ptr {
    startupNetworking()
    defer cleanupNetworking()
    
    client_fd Socket = socket(AF_INET, SOCK_STREAM, 0)
    unless validSocket(client_fd),
        printf('socket() failed\n'); return null
    
    defer closeSocket(client_fd)
    
    // TODO: Use getaddrinfo instead of gethostbyname
    host *hostent = gethostbyname(strong_host_address)
    delete strong_host_address
    
    if host == null {
        printf('gethostbyname() failed\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to resolve hostname"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    serveraddr sockaddr_in = undef
    memset(&serveraddr, 0, sizeof sockaddr_in)
    serveraddr.sin_family = AF_INET
    serveraddr.sin_port = htons(PORT)
    
    // TODO: Support IPv6
    memcpy(&serveraddr.sin_addr.s_addr, host.h_addr_list[0], sizeof in_addr)

    ioctlopt IOCtlOpt = 1
    ioctlSocket(client_fd, FIONBIO, &ioctlopt)
    errno = 0
    
    #if __windows__
    // On windows, expect 'WSAEWOULDBLOCK' back after calling connect
    initial_connect_failed bool = connect(client_fd, &serveraddr as *sockaddr, sizeof sockaddr_in) < 0 && WSAGetLastError() != WSAEWOULDBLOCK
    #else
    // On unix, expect errno to be 'EINPROGRESS'
    initial_connect_failed bool = connect(client_fd, &serveraddr as *sockaddr, sizeof sockaddr_in) < 0 && errno != EINPROGRESS
    #end
    if initial_connect_failed {
        printf('connect() failed [initial]\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to connect to server"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    ioctlopt = 0
    ioctlSocket(client_fd, FIONBIO, &ioctlopt)
    
    timeout timeval = *static timeval (3, 0)
    bitfield fd_set = undef
    FD_ZERO(&bitfield)
    FD_SET(client_fd, &bitfield)
    
    #if __windows__
    max_fd int = 0
    #else
    max_fd int = client_fd + 1
    #end
    
    res int = select(max_fd, null, &bitfield, null, &timeout)
    
    if res < 0 && errno != EINTR {
        printf('connect() failed [select() < 0]\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to connect to server"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    if res == 0 {
        // Timed out
        printf('connect() failed [select() == 0]\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to connect to server"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    err_opt int = undef
    len socklen_t = sizeof int
    if getsockopt(client_fd, SOL_SOCKET, SO_ERROR, &err_opt, &len) < 0 {
        printf('getsockopt(SO_ERROR) failed\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to connect to server"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    if err_opt {
        printf('connect() failed [err_opt]\n')
        pthread_mutex_lock(&gamedata.networking_mutex)
        gamedata.networking_error = "Failed to connect to server"
        pthread_mutex_unlock(&gamedata.networking_mutex)
        return null
    }
    
    defer printf('Terminating...\n')
    defer closeSocket(client_fd)
    
    printf('Connected\n')
    pthread_mutex_lock(&gamedata.networking_mutex)
    gamedata.waiting_for_connection = false
    pthread_mutex_unlock(&gamedata.networking_mutex)
    
    transmission(client_fd, false)
    return null
}

func transmission(socket Socket, is_server bool) {
    flags int = 1
    if setsockopt(socket, IPPROTO_TCP, TCP_NODELAY, &flags, sizeof int) < 0,
        printf('setsockopt(TCP_NODELAY) failed\n'); return
    
    ioctlopt IOCtlOpt = 1
    if ioctlSocket(socket, FIONBIO, &ioctlopt) < 0,
        printf('ioctlSocket(FIONBIO) failed [transmission]\n'); return
    
    // Don't send sigpipe signal on Mac
    #if __macos__
    if setsockopt(socket, SOL_SOCKET, SO_NOSIGPIPE, &flags, sizeof int),
        printf('setsockopt(SO_NOSIGPIPE) failed\n'); return
    #end
    
    buffer_size usize = 1024
    buffer *ubyte = new ubyte * buffer_size
    defer delete buffer
    
    istream *NetworkStream = &gamedata.istream
    ostream *NetworkStream = &gamedata.ostream
    
    until break {
        // Handle transmission
        
        // Close thread if requested
        if networkingThreadShouldClose(), return
        
        // Only receive data if data is ready
        ioctlSocket(socket, FIONREAD, undef bytes_available IOCtlOpt)
        
        while bytes_available != 0 {
            // Receive data from network
            received_length int = recv(socket, buffer, min(bytes_available as int, buffer_size as int), 0)
            if received_length < 0, printf('recv() failed\n'); return
            istream.writeRaw(buffer, received_length)
            ioctlSocket(socket, FIONREAD, &bytes_available)
        }
        
        // Close thread if requested
        if networkingThreadShouldClose(), return
        
        if ostream.getLength() > 0 {
            // Read any frames that are ready
            until break {
                // Attempt to read the next frame
                if !ostream.read(undef contents *ubyte, undef contents_length usize), break
                
                defer delete contents
                
                // Send frame contents
                frame_header uint = htonl(contents_length as uint)
                
                if send(socket, &frame_header, sizeof uint, 0) < 0,
                    printf('send(frame_header) failed\n'); return
                
                if contents_length != 0, if send(socket, contents, contents_length, 0) < 0,
                    printf('send(contents) failed\n'); return
            }
        }
    }
    
    return
}

func networkingThreadShouldClose bool {
    pthread_mutex_lock(&gamedata.networking_mutex)
    should_close bool = gamedata.networking_thread_should_close
    pthread_mutex_unlock(&gamedata.networking_mutex)
    if should_close, printf('Closing network thread correctly...\n')
    return should_close
}

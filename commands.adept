
import 'main.adept'

enum CommandKind (BUILD, OLD_SELECT, MOVE, MAKE, SELECT)
struct Command (command_kind CommandKind) {
    func getSize usize = this.getSize(false)
    func getSizeFromNetworkOrdered usize = this.getSize(true)
    
    func getSize(is_network_order bool) usize {
        size usize = this.getSizeUnwrapped(is_network_order)
        debug('size = %d\n', size as int)
        if size == 0, exit(1)
        return size
    }
    
    func getSizeUnwrapped(is_network_ordered bool) usize {
        command_kind CommandKind = is_network_ordered ? ntoh64(this.command_kind as usize) as CommandKind : this.command_kind
        switch command_kind {
        case CommandKind::BUILD,  return sizeof BuildCommand
        case CommandKind::OLD_SELECT, return sizeof OldSelectCommand
        case CommandKind::MOVE,   return sizeof MoveCommand
        case CommandKind::MAKE,   return sizeof MakeCommand
        case CommandKind::SELECT, return (this as *SelectCommand).getSize(is_network_ordered)
        default
            printf('INTERNAL ERROR: Command.getSize(%s) got unknown CommandKind %llu %llu\n', is_network_ordered ? 'true' : 'false', command_kind as ulong, hton64(command_kind as ulong) as ulong)
            exit(1)
        }
        return 0
    }
    
    func execute {
        #if enable_debug_logging
        this.print()
        #end
        
        switch this.command_kind {
        case CommandKind::BUILD
            build *BuildCommand = this as *BuildCommand
            building Building = building(build.kind, build.team)
            building.x = build.x
            building.y = build.y
            gamedata.buildings.add(building)
            
            switch build.team {
            case 1ub, gamedata.blue_placed_once = true
            case 2ub, gamedata.red_placed_once  = true
            }
            
            return
        case CommandKind::OLD_SELECT
            select *OldSelectCommand = this as *OldSelectCommand
            selection *<UnitID> List = select.team == gamedata.team ? &gamedata.selection : &gamedata.enemy_selection
            selection.clear()
            repeat 256, if getBit(&select.bytes, idx) {
                unit *Unit = gamedata.units.getPointer(idx)
                // NOTE: UnitKind::DEAD removed as of Nov 17 2019 - Isaac Shelton
                /* unless unit.kind == UnitKind::DEAD, selection.add(unit.id) */
                selection.add(unit.id)
            }
            return
        case CommandKind::MOVE
            move *MoveCommand = this as *MoveCommand
            moveTo(move.team, move.x, move.y, true)
            return
        case CommandKind::MAKE
            make *MakeCommand = this as *MakeCommand
            switch make.kind {
            case UnitKind::RAIDER,   makeRaider(make.team)
            case UnitKind::MARKSMEN, makeMarksmen(make.team)
            case UnitKind::GUARDIAN, makeGuardian(make.team)
            default printf('Unknown unit %08X for make Command in execute()\n', make.kind as usize)
            }
            return
        case CommandKind::SELECT
            select *SelectCommand = this as *SelectCommand
            selection *<UnitID> List = select.team == gamedata.team ? &gamedata.selection : &gamedata.enemy_selection
            selection.clear()
            
            if select.count > 256 {
                printf('INTERNAL ERROR: Sanity check in Command.execute() select.count > 256 failed, ignoring command\n')
                return
            }
            
            next_id *uint = cast *uint (select as *ubyte + sizeof SelectCommand as ptr)
            repeat select.count {
                selection.add(*next_id + select.base)
                next_id = cast *uint (next_id as *ubyte + sizeof uint as ptr)
            }
            return
        default
            printf('Unknown Command in execute()\n')
        }
    }
    
    func print {
        switch this.command_kind {
        case CommandKind::BUILD
            printf('Build %s\n', buildKindName((this as *BuildCommand).kind))
        case CommandKind::OLD_SELECT
            printf('Old Select\n')
        case CommandKind::MOVE
            printf('Move team %d to %f, %f\n', (this as *MoveCommand).team, (this as *MoveCommand).x as double, (this as *MoveCommand).y as double)
            return
        case CommandKind::MAKE
            switch (this as *MakeCommand).kind {
            case UnitKind::RAIDER,   printf('Make raider\n')
            case UnitKind::MARKSMEN, printf('Make marksmen\n')
            case UnitKind::GUARDIAN, printf('Make guardian\n')
            default printf('Make unknown unit\n')
            }
        case CommandKind::SELECT
            printf('Select %d units\n', (this as *SelectCommand).count)
        default
            printf('Unknown Command in print()\n')
        }
    }
    
    func convert(from_host_to_network bool) {
        #if __little_endian__
        command_kind CommandKind = from_host_to_network ? this.command_kind : ntoh64(this.command_kind as usize) as CommandKind
        this.command_kind = hton64(this.command_kind as usize) as CommandKind
        
        switch command_kind {
        case CommandKind::BUILD
            build *BuildCommand = this as *BuildCommand
            build.kind = hton64(build.kind as usize) as BuildingKind
            *cast *uint &build.x = htonl(*cast *uint &build.x)
            *cast *uint &build.y = htonl(*cast *uint &build.y)
            return
        case CommandKind::OLD_SELECT
            // Nothing to do
            return
        case CommandKind::MOVE
            move *MoveCommand = this as *MoveCommand
            *cast *uint &move.x = htonl(*cast *uint &move.x)
            *cast *uint &move.y = htonl(*cast *uint &move.y)
            return
        case CommandKind::MAKE
            make *MakeCommand = this as *MakeCommand
            make.kind = hton64(make.kind as usize) as UnitKind
            return
        case CommandKind::SELECT
            select *SelectCommand = this as *SelectCommand
            
            if !from_host_to_network {
                select.count = ntohl(select.count)
            }
            
            next_id *uint = cast *uint (select as *ubyte + sizeof SelectCommand as ptr)
            repeat select.count {
                *next_id = htonl(*next_id)
                next_id = cast *uint (next_id as *ubyte + sizeof uint as ptr)
            }
            
            if from_host_to_network {
                select.count = htonl(select.count)
            }
            
            select.base = htonl(select.base)
        default
            printf('INTERNAL ERROR: Command.convert(%s) got unknown CommandKind %08X %08X\n', from_host_to_network ? 'true' : 'false', command_kind as uint, htonl(command_kind as uint))
            exit(1)
        }
        #end
    }
    
    func hton {
        #if __little_endian__
        this.convert(true) // Works because hton and ntoh are mostly symmetrical
        #end
    }
    
    func ntoh {
        #if __little_endian__
        this.convert(false) // Works because hton and ntoh are mostly symmetrical
        #end
    }
}

packed struct BuildCommand (struct Command, team ubyte, kind BuildingKind, x, y float)
packed struct OldSelectCommand (struct Command, team ubyte, bytes 32 ubyte)
packed struct MoveCommand (struct Command, team ubyte, x, y float)
packed struct MakeCommand (struct Command, team ubyte, kind UnitKind)
packed struct SelectCommand (struct Command, team ubyte, count uint, base uint /* data 0 uint */)

func getSize(this *SelectCommand, is_network_ordered bool) usize {
    return sizeof SelectCommand + (is_network_ordered ? ntohl(this.count) : this.count) * sizeof uint
}

struct Actions (first_command *Command, size, count usize) {
    func clear {
        this.destroy()
        this.zero()
    }
    
    func zero {
        this.first_command = null
        this.size = 0
        this.count = 0
    }
    
    func destroy {
        delete this.first_command
    }
    
    func addCommand(in command *Command) {
        command_size usize = command.getSize()
        this.first_command = realloc(this.first_command, this.size + command_size)
        memcpy((this.first_command as *ubyte) at this.size, command, command_size)
        this.size += command_size
        this.count++
        
        #if enable_debug_logging
        duplicate *Command = cast *Command (new ubyte * command_size)
        defer delete duplicate
        
        memcpy(duplicate as *ubyte, command, command_size)
        duplicate.hton()
        duplicate.ntoh()
        
        if memcmp((this.first_command as *ubyte) at (this.size - command_size), duplicate, command_size) != 0 {
            printf('htonntoh test failed for %d\n', duplicate.command_kind as int)
        }
        #end
    }
    
    func addBuildCommand(team int, kind BuildingKind, x, y float) {
        command BuildCommand
        command.command_kind = CommandKind::BUILD
        command.team = team
        command.kind = kind
        command.x = x
        command.y = y
        this.addCommand(&command as *Command)
    }
    
    func addOldSelectCommand(team int, bytes 32 ubyte) {
        command OldSelectCommand
        command.command_kind = CommandKind::OLD_SELECT
        command.team = team
        command.bytes = bytes
        // (rest is auto zeroed)
        this.addCommand(&command as *Command)
    }
    
    func addSelectCommand(team int, bytes 32 ubyte) {
        // Use bitflags 'bytes' that mark whether each unit should be selected
        // to construct a SelectCommand
        
        // Determine 'count' of units selected as well as the minimum unit id
        count usize = 0
        min_unit_id usize = -1
        repeat 256, if getBit(&bytes, idx) {
            if idx >= gamedata.units.length {
                printf('INTERNAL ERROR: addSelectCommand() got bits for units out of range\n')
                return
            }
            
            id usize = gamedata.units.getPointer(idx).id
            if id < min_unit_id, min_unit_id = id
            count++
        }
        
        // Allocate space for SelectCommand
        command *SelectCommand = cast *SelectCommand new ubyte * (sizeof SelectCommand + count * sizeof uint)
        defer delete command
        
        // Fill in core info for SelectCommand
        command.command_kind = CommandKind::SELECT
        command.team = team
        command.count = count
        command.base = min_unit_id
        
        // Write unit id's to SelectCommand as offset by 'command.base'
        next_id_to_write *uint = cast *uint (command as *ubyte + sizeof SelectCommand as ptr)
        if count != 0, repeat 256 {
            if getBit(&bytes, idx) {
                id usize = gamedata.units.getPointer(idx).id
                
                if id - min_unit_id > 0xFFFFFFFF {
                    printf('INTERNAL ERROR: Too great of span to select in addSelectCommand(), ignoring\n')
                }
                
                if gamedata.units.getPointer(idx).team != team {
                    printf('INTERNAL ERROR: Selecting enemy units in addSelectCommand(), ignoring\n')
                }
                
                *next_id_to_write = id - min_unit_id
                next_id_to_write = cast *uint (next_id_to_write as *ubyte + sizeof uint as ptr)
            }
        }
        
        // Add command to 'Actions' list
        this.addCommand(command as *Command)
    }
    
    func addMakeCommand(team int, kind UnitKind) {
        command MakeCommand
        command.command_kind = CommandKind::MAKE
        command.team = team
        command.kind = kind
        this.addCommand(&command as *Command)
    }
    
    func addMoveCommand(team int, x, y float) {
        command MoveCommand
        command.command_kind = CommandKind::MOVE
        command.team = team
        command.x = x
        command.y = y
        this.addCommand(&command as *Command)
    }
    
    func addRandomCommand(team int) {
        repeat rand() % 5, switch rand() % 4 {
        case 0
            if gamedata.buildings.length > 512 {
                gamedata.too_many_buildings = true
                return
            }
            this.addBuildCommand(team, (rand() % 4) as BuildingKind, (rand() % (960 * 2) - 960) as float, (rand() % (960 * 2) - 960) as float)
            return
        case 1
            this.addMakeCommand(team, (rand() % 3 + 1) as UnitKind)
            return
        case 2
            this.addMoveCommand(team, (rand() % (960 * 2) - 960) as float, (rand() % (960 * 2) - 960) as float)
            return
        case 3
            bytes 32 ubyte
            each Unit in gamedata.units, if it.team == gamedata.team && rand() % 2 == 0, setBit(&bytes, idx)
            this.addSelectCommand(team, bytes)
            return
        }
    }
    
    func hton {
        debug('hton {\n')
        defer debug('hton }\n')
        
        if this.size == 0, return
        
        #if __little_endian__
        command *Command = this.first_command
        while command {
            debug('interate() {\n')
            next *Command = this.iterate(command)
            debug('interate() }\n')
            command.hton()
            command = next
        }
        #end
        
        // Hack: Compiler doesn't handle defer statements with functions ending with #end correctly
        return
    }
    
    func ntoh {
        debug('ntoh {\n')
        defer debug('ntoh }\n')
        
        if this.size == 0, return
        
        #if __little_endian__
        command *Command = this.first_command
        while command {
            command.ntoh()
            debug('interate() {\n')
            command = this.iterate(command)
            debug('interate() }\n')
        }
        #end
        
        // Hack: Compiler doesn't handle defer statements with functions ending with #end correctly
        return
    }
    
    func iterate(head *Command) *Command {
        head = cast *Command (head as *ubyte + head.getSize() as ptr)
        return head as *ubyte == this.first_command as *ubyte + this.size as ptr ? null as *Command : head
    }
    
    func transferToNetworkStream(stream *NetworkStream, checksum ubyte) {
        if this.size != 0, debug('transferToNetworkStream(%d)\n', this.size as int)
        this.hton()
        
        stream.writeFrame(this.size + 1)
        stream.writeRaw(&checksum, sizeof ubyte)
        stream.writeRaw(this.first_command as *ubyte, this.size)
    }
    
    func transferFromNetworkBuffer(buffer *ubyte, length usize) {
        this.destroy()
        this.first_command = (new *ubyte * length) as *Command
        this.size = length
        this.count = 0
        memcpy(this.first_command as *ubyte, buffer, length)
        this.ntoh()
    }
    
    func print {
        if this.size == 0, return
        
        command *Command = this.first_command
        while command {
            command.print()
            command = this.iterate(command)
        }
    }
    
    func execute {
        if this.size == 0, return
        
        command *Command = this.first_command
        while command {
            command.execute()
            command = this.iterate(command)
        }
    }
    
    func countQueuedUnits(team int, kind UnitKind) usize {
        if this.size == 0, return 0
        
        queued usize = 0
        command *Command = this.first_command
        while command {
            if command.command_kind == CommandKind::MAKE && (command as *MakeCommand).team == team && (command as *MakeCommand).kind == kind,
                queued++
            command = this.iterate(command)
        }
        return queued
    }
}

func buildKindName(kind BuildingKind) *ubyte {
    switch kind {
    case BuildingKind::MINE,    return 'Mine'
    case BuildingKind::OUTPOST, return 'Outpost'
    case BuildingKind::RANGE,   return 'Range'
    case BuildingKind::CLUB,    return 'Club'
    }
    return 'Unknown'
}

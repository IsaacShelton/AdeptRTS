
import 'main.adept'

func checksum(this *GameData) ubyte {
    address ulong = 0
    each Building in this.buildings {
        address = hashStruct(address, &it)
    }
    each Unit in this.units {
        address = hashStruct(address, &it)
    }
    address = hashStruct(address, &this.next_id)
    
    return (address % 256) as ubyte
}

func debugChecksum(this *GameData) {
    address ulong = this.checksum() as ulong
    
    result String = ""
    
    #if debug_checksum
    buildings_hash ulong = 0
    each Building in this.buildings, buildings_hash = hashStruct(buildings_hash, &it)
    
    units_hash ulong = 0
    each Unit in this.units, units_hash = hashStruct(units_hash, &it)
    
    tmp 1024 ubyte
    
    sprintf(&tmp as *ubyte, 'HASH INFO for 0x%02X:\n', (address % 256) as ubyte as int)
    result = result + string(&tmp as *ubyte)
    sprintf(&tmp as *ubyte, 'buildings (hash: %02X): ', buildings_hash)
    result = result + string(&tmp as *ubyte)
    
    each Building in this.buildings {
        // (kind BuildingKind, texture CaptTexture, x, y, w, h float, health, max_health, team int, progress float)
        sprintf(&tmp as *ubyte, '{%s, %d, %f, %f, %f, %f, %d, %d, %d, %f} ', buildKindName(it.kind), it.texture.id as int,
            it.x as double, it.y as double, it.w as double, it.h as double, it.health as int, it.max_health as int, it.team as int, it.progress as double)
        result = result + string(&tmp as *ubyte)
    }
    
    sprintf(&tmp as *ubyte, '\nunits (hash: %02X): ', units_hash)
    result = result + string(&tmp as *ubyte)
    
    each Unit in this.units {
        sprintf(&tmp as *ubyte, '%d ', it.id as int)
        result = result + string(&tmp as *ubyte)
    }
    
    sprintf(&tmp as *ubyte, '\nnext_id = %d\n--------------------\n', this.next_id as int)
    result = result + string(&tmp as *ubyte)
    
    this.hash_info_list.add(result.commit())
    
    if this.hash_info_list.length > 3 {
        this.hash_info_list.remove(0uz)
    }
    #end
}

func hash(start ulong, data *ubyte, length usize) ulong = sdbm(start, data, length)

func sdbm(start ulong, data *ubyte, length usize) ulong {
    address ulong = start
    repeat length {
        address = data[idx] + (address <<< 6) + (address <<< 16) - address
    }
    return address
}

func hashStruct(address ulong, structure *$T) ulong {
    return hash(address, structure as *ubyte, sizeof $T)
}
